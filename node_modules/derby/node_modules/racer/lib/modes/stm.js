// Generated by CoffeeScript 1.3.3
var Serializer, Stm, copy, createJournal, createStartIdVerifier, transaction, _ref;

transaction = require('../transaction.server');

Serializer = require('../Serializer');

_ref = require('./shared'), createJournal = _ref.createJournal, createStartIdVerifier = _ref.createStartIdVerifier;

module.exports = function(storeOptions) {
  var journal;
  journal = createJournal(storeOptions);
  return new Stm(storeOptions.store, journal);
};

Stm = function(store, journal) {
  var _this = this;
  this._store = store;
  this._journal = journal;
  this._txnApplier = new Serializer({
    withEach: function(txn, ver, cb) {
      return store._finishCommit(txn, ver, cb);
    }
  });
  this._txnApplier = new Serializer({
    withEach: function(txn, ver, cb) {
      return cb();
    }
  });
  this.startIdVerifier = createStartIdVerifier(function(callback) {
    return _this._journal.startId(callback);
  });
  this.detectConflict = this.detectConflict.bind(this);
  this.addToJournal = this.addToJournal.bind(this);
  this.incrVer = this.incrVer.bind(this);
};

Stm.prototype.startId = function(cb) {
  return this._journal.startId(cb);
};

Stm.prototype.detectConflict = function(req, res, next) {
  var eachCb, txn, ver;
  txn = req.data;
  ver = transaction.getVer(txn);
  if (ver != null) {
    if (typeof ver !== 'number') {
      return res.fail('Version must be null or a number');
    }
    eachCb = function(err, loggedTxn, next) {
      if ((ver != null) && (err = transaction.conflict(txn, loggedTxn))) {
        return next(err);
      }
      return next(null);
    };
  } else {
    eachCb = function(err, loggedTxn, next) {
      return next(null);
    };
  }
  return this._journal.eachTxnSince(ver, {
    meta: {
      txn: txn
    },
    each: eachCb,
    done: function(err, addParams) {
      if (err) {
        return res.fail(err);
      }
      req.addParams = addParams;
      return next();
    }
  });
};

Stm.prototype.addToJournal = function(req, res, next) {
  var addParams, journalTxn, txn,
    _this = this;
  txn = req.data, addParams = req.addParams;
  journalTxn = copy(txn);
  return this._journal.add(journalTxn, addParams, function(err, ver) {
    if (err) {
      return res.fail(err);
    }
    transaction.setVer(journalTxn, ver);
    req.newVer = ver;
    return _this._txnApplier.add(txn, ver, function(err) {
      if (err) {
        return res.fail(err);
      }
      return next();
    });
  });
};

Stm.prototype.incrVer = function(req, res, next) {
  var txn;
  txn = req.data;
  transaction.setVer(txn, req.newVer);
  return next();
};

Stm.prototype.flush = function(cb) {
  return this._journal.flush(cb);
};

Stm.prototype.disconnect = function() {
  var _base;
  return typeof (_base = this._journal).disconnect === "function" ? _base.disconnect() : void 0;
};

Stm.prototype.version = function(cb) {
  return this._journal.version(cb);
};

Stm.prototype.snapshotSince = function(_arg, cb) {
  var clientId, ver;
  ver = _arg.ver, clientId = _arg.clientId;
  return this._journal.txnsSince(ver, clientId, this._store._pubSub, function(err, txns) {
    if (err) {
      return cb(err);
    }
    return cb(null, {
      txns: txns
    });
  });
};

copy = function(x) {
  return JSON.parse(JSON.stringify(x));
};
